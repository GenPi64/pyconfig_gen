# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pyconfig_gen_dialog.ui'
#
# Created by: PyQt5 UI code generator 5.10.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainDialog(object):
    def setupUi(self, MainDialog):
        MainDialog.setObjectName("MainDialog")
        MainDialog.resize(554, 662)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainDialog.sizePolicy().hasHeightForWidth())
        MainDialog.setSizePolicy(sizePolicy)
        MainDialog.setMinimumSize(QtCore.QSize(0, 0))
        MainDialog.setBaseSize(QtCore.QSize(0, 10))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/main_icon"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainDialog.setWindowIcon(icon)
        MainDialog.setAutoFillBackground(False)
        self.gridLayout = QtWidgets.QGridLayout(MainDialog)
        self.gridLayout.setObjectName("gridLayout")
        self.main_bb = QtWidgets.QDialogButtonBox(MainDialog)
        self.main_bb.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok|QtWidgets.QDialogButtonBox.Reset)
        self.main_bb.setObjectName("main_bb")
        self.gridLayout.addWidget(self.main_bb, 5, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 4, 0, 1, 1)
        self.tabWidget = QtWidgets.QTabWidget(MainDialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabWidget.sizePolicy().hasHeightForWidth())
        self.tabWidget.setSizePolicy(sizePolicy)
        self.tabWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.display_tab = QtWidgets.QWidget()
        self.display_tab.setObjectName("display_tab")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.display_tab)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.graphics_driver_gb = QtWidgets.QHBoxLayout()
        self.graphics_driver_gb.setObjectName("graphics_driver_gb")
        self.graphics_driver_lb = QtWidgets.QLabel(self.display_tab)
        self.graphics_driver_lb.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.graphics_driver_lb.setObjectName("graphics_driver_lb")
        self.graphics_driver_gb.addWidget(self.graphics_driver_lb)
        self.graphics_driver_cb = QtWidgets.QComboBox(self.display_tab)
        self.graphics_driver_cb.setToolTip("")
        self.graphics_driver_cb.setStatusTip("")
        self.graphics_driver_cb.setObjectName("graphics_driver_cb")
        self.graphics_driver_cb.addItem("")
        self.graphics_driver_cb.addItem("")
        self.graphics_driver_cb.addItem("")
        self.graphics_driver_gb.addWidget(self.graphics_driver_cb)
        self.cma_lb = QtWidgets.QLabel(self.display_tab)
        self.cma_lb.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.cma_lb.setObjectName("cma_lb")
        self.graphics_driver_gb.addWidget(self.cma_lb)
        self.cma_cb = QtWidgets.QComboBox(self.display_tab)
        self.cma_cb.setObjectName("cma_cb")
        self.cma_cb.addItem("")
        self.cma_cb.addItem("")
        self.cma_cb.addItem("")
        self.cma_cb.addItem("")
        self.cma_cb.addItem("")
        self.cma_cb.addItem("")
        self.graphics_driver_gb.addWidget(self.cma_cb)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.graphics_driver_gb.addItem(spacerItem1)
        self.verticalLayout_4.addLayout(self.graphics_driver_gb)
        self.mode_gb = QtWidgets.QHBoxLayout()
        self.mode_gb.setObjectName("mode_gb")
        self.normal_mode_rb = QtWidgets.QRadioButton(self.display_tab)
        self.normal_mode_rb.setChecked(False)
        self.normal_mode_rb.setObjectName("normal_mode_rb")
        self.mode_gb.addWidget(self.normal_mode_rb)
        self.safe_mode_rb = QtWidgets.QRadioButton(self.display_tab)
        self.safe_mode_rb.setChecked(True)
        self.safe_mode_rb.setObjectName("safe_mode_rb")
        self.mode_gb.addWidget(self.safe_mode_rb)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.mode_gb.addItem(spacerItem2)
        self.verticalLayout_4.addLayout(self.mode_gb)
        self.normal_mode_gb = QtWidgets.QGroupBox(self.display_tab)
        self.normal_mode_gb.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.normal_mode_gb.sizePolicy().hasHeightForWidth())
        self.normal_mode_gb.setSizePolicy(sizePolicy)
        self.normal_mode_gb.setMinimumSize(QtCore.QSize(0, 0))
        self.normal_mode_gb.setObjectName("normal_mode_gb")
        self.formLayout = QtWidgets.QFormLayout(self.normal_mode_gb)
        self.formLayout.setObjectName("formLayout")
        self.hdmi_group_lb = QtWidgets.QLabel(self.normal_mode_gb)
        self.hdmi_group_lb.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.hdmi_group_lb.setObjectName("hdmi_group_lb")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.hdmi_group_lb)
        self.hdmi_group_cb = QtWidgets.QComboBox(self.normal_mode_gb)
        self.hdmi_group_cb.setObjectName("hdmi_group_cb")
        self.hdmi_group_cb.addItem("")
        self.hdmi_group_cb.addItem("")
        self.hdmi_group_cb.addItem("")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.hdmi_group_cb)
        self.hdmi_mode_lb = QtWidgets.QLabel(self.normal_mode_gb)
        self.hdmi_mode_lb.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.hdmi_mode_lb.setObjectName("hdmi_mode_lb")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.hdmi_mode_lb)
        self.hdmi_mode_cb = QtWidgets.QComboBox(self.normal_mode_gb)
        self.hdmi_mode_cb.setObjectName("hdmi_mode_cb")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.hdmi_mode_cb)
        self.additional_opts_gb = QtWidgets.QGroupBox(self.normal_mode_gb)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.additional_opts_gb.sizePolicy().hasHeightForWidth())
        self.additional_opts_gb.setSizePolicy(sizePolicy)
        self.additional_opts_gb.setMinimumSize(QtCore.QSize(200, 180))
        self.additional_opts_gb.setCheckable(False)
        self.additional_opts_gb.setObjectName("additional_opts_gb")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.additional_opts_gb)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.hdmi_force_hotplug_cb = QtWidgets.QCheckBox(self.additional_opts_gb)
        self.hdmi_force_hotplug_cb.setObjectName("hdmi_force_hotplug_cb")
        self.verticalLayout_2.addWidget(self.hdmi_force_hotplug_cb)
        self.hdmi_ignore_edid_cb = QtWidgets.QCheckBox(self.additional_opts_gb)
        self.hdmi_ignore_edid_cb.setObjectName("hdmi_ignore_edid_cb")
        self.verticalLayout_2.addWidget(self.hdmi_ignore_edid_cb)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.config_hdmi_boost_lb = QtWidgets.QLabel(self.additional_opts_gb)
        self.config_hdmi_boost_lb.setObjectName("config_hdmi_boost_lb")
        self.horizontalLayout_3.addWidget(self.config_hdmi_boost_lb)
        self.config_hdmi_boost_sb = QtWidgets.QSpinBox(self.additional_opts_gb)
        self.config_hdmi_boost_sb.setMaximum(11)
        self.config_hdmi_boost_sb.setProperty("value", 5)
        self.config_hdmi_boost_sb.setObjectName("config_hdmi_boost_sb")
        self.horizontalLayout_3.addWidget(self.config_hdmi_boost_sb)
        self.config_hdmi_boost_status_lb = QtWidgets.QLabel(self.additional_opts_gb)
        self.config_hdmi_boost_status_lb.setText("")
        self.config_hdmi_boost_status_lb.setObjectName("config_hdmi_boost_status_lb")
        self.horizontalLayout_3.addWidget(self.config_hdmi_boost_status_lb)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.overscan_gb = QtWidgets.QGroupBox(self.additional_opts_gb)
        self.overscan_gb.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.overscan_gb.sizePolicy().hasHeightForWidth())
        self.overscan_gb.setSizePolicy(sizePolicy)
        self.overscan_gb.setCheckable(True)
        self.overscan_gb.setChecked(False)
        self.overscan_gb.setObjectName("overscan_gb")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.overscan_gb)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.overscan_left_lb = QtWidgets.QLabel(self.overscan_gb)
        self.overscan_left_lb.setObjectName("overscan_left_lb")
        self.horizontalLayout_4.addWidget(self.overscan_left_lb)
        self.overscan_left_sb = QtWidgets.QSpinBox(self.overscan_gb)
        self.overscan_left_sb.setProperty("value", 24)
        self.overscan_left_sb.setObjectName("overscan_left_sb")
        self.horizontalLayout_4.addWidget(self.overscan_left_sb)
        self.overscan_right_lb = QtWidgets.QLabel(self.overscan_gb)
        self.overscan_right_lb.setObjectName("overscan_right_lb")
        self.horizontalLayout_4.addWidget(self.overscan_right_lb)
        self.overscan_right_sb = QtWidgets.QSpinBox(self.overscan_gb)
        self.overscan_right_sb.setProperty("value", 24)
        self.overscan_right_sb.setObjectName("overscan_right_sb")
        self.horizontalLayout_4.addWidget(self.overscan_right_sb)
        self.overscan_top_lb = QtWidgets.QLabel(self.overscan_gb)
        self.overscan_top_lb.setObjectName("overscan_top_lb")
        self.horizontalLayout_4.addWidget(self.overscan_top_lb)
        self.overscan_top_sb = QtWidgets.QSpinBox(self.overscan_gb)
        self.overscan_top_sb.setProperty("value", 24)
        self.overscan_top_sb.setObjectName("overscan_top_sb")
        self.horizontalLayout_4.addWidget(self.overscan_top_sb)
        self.overscan_bottom_lb = QtWidgets.QLabel(self.overscan_gb)
        self.overscan_bottom_lb.setObjectName("overscan_bottom_lb")
        self.horizontalLayout_4.addWidget(self.overscan_bottom_lb)
        self.overscan_bottom_sb = QtWidgets.QSpinBox(self.overscan_gb)
        self.overscan_bottom_sb.setProperty("value", 24)
        self.overscan_bottom_sb.setObjectName("overscan_bottom_sb")
        self.horizontalLayout_4.addWidget(self.overscan_bottom_sb)
        spacerItem4 = QtWidgets.QSpacerItem(0, 20, QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem4)
        self.verticalLayout_2.addWidget(self.overscan_gb)
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.additional_opts_gb)
        self.verticalLayout_4.addWidget(self.normal_mode_gb)
        self.further_settings_gb = QtWidgets.QGroupBox(self.display_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.further_settings_gb.sizePolicy().hasHeightForWidth())
        self.further_settings_gb.setSizePolicy(sizePolicy)
        self.further_settings_gb.setMinimumSize(QtCore.QSize(0, 0))
        self.further_settings_gb.setObjectName("further_settings_gb")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.further_settings_gb)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.hdmi_drive_cb = QtWidgets.QCheckBox(self.further_settings_gb)
        self.hdmi_drive_cb.setObjectName("hdmi_drive_cb")
        self.verticalLayout_3.addWidget(self.hdmi_drive_cb)
        self.hdmi_force_edid_audio_cb = QtWidgets.QCheckBox(self.further_settings_gb)
        self.hdmi_force_edid_audio_cb.setObjectName("hdmi_force_edid_audio_cb")
        self.verticalLayout_3.addWidget(self.hdmi_force_edid_audio_cb)
        self.verticalLayout_4.addWidget(self.further_settings_gb)
        self.tabWidget.addTab(self.display_tab, "")
        self.wifi_tab = QtWidgets.QWidget()
        self.wifi_tab.setObjectName("wifi_tab")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.wifi_tab)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.main_interfaces_gb = QtWidgets.QGroupBox(self.wifi_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_interfaces_gb.sizePolicy().hasHeightForWidth())
        self.main_interfaces_gb.setSizePolicy(sizePolicy)
        self.main_interfaces_gb.setObjectName("main_interfaces_gb")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.main_interfaces_gb)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.spi_cb = QtWidgets.QCheckBox(self.main_interfaces_gb)
        self.spi_cb.setObjectName("spi_cb")
        self.verticalLayout_6.addWidget(self.spi_cb)
        self.i2c_cb = QtWidgets.QCheckBox(self.main_interfaces_gb)
        self.i2c_cb.setObjectName("i2c_cb")
        self.verticalLayout_6.addWidget(self.i2c_cb)
        self.i2s_cb = QtWidgets.QCheckBox(self.main_interfaces_gb)
        self.i2s_cb.setObjectName("i2s_cb")
        self.verticalLayout_6.addWidget(self.i2s_cb)
        self.bluetooth_cb = QtWidgets.QCheckBox(self.main_interfaces_gb)
        self.bluetooth_cb.setObjectName("bluetooth_cb")
        self.verticalLayout_6.addWidget(self.bluetooth_cb)
        self.audio_cb = QtWidgets.QCheckBox(self.main_interfaces_gb)
        self.audio_cb.setObjectName("audio_cb")
        self.verticalLayout_6.addWidget(self.audio_cb)
        self.verticalLayout_5.addWidget(self.main_interfaces_gb)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_5.addItem(spacerItem5)
        self.tabWidget.addTab(self.wifi_tab, "")
        self.gridLayout.addWidget(self.tabWidget, 3, 0, 1, 1)

        self.retranslateUi(MainDialog)
        self.tabWidget.setCurrentIndex(0)
        self.main_bb.accepted.connect(MainDialog.accept)
        self.main_bb.rejected.connect(MainDialog.reject)
        self.main_bb.clicked['QAbstractButton*'].connect(MainDialog.button_bar_button_clicked)
        self.hdmi_force_edid_audio_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        self.overscan_top_sb.valueChanged['int'].connect(MainDialog.gui_value_changed)
        self.graphics_driver_cb.currentIndexChanged['int'].connect(MainDialog.gui_value_changed)
        self.hdmi_group_cb.currentIndexChanged['int'].connect(MainDialog.hdmi_group_changed)
        self.cma_cb.currentIndexChanged['int'].connect(MainDialog.gui_value_changed)
        self.safe_mode_rb.clicked.connect(MainDialog.gui_changed)
        self.normal_mode_rb.clicked.connect(MainDialog.gui_changed)
        self.hdmi_mode_cb.currentIndexChanged['int'].connect(MainDialog.gui_value_changed)
        self.overscan_gb.toggled['bool'].connect(MainDialog.gui_bool_changed)
        self.overscan_right_sb.valueChanged['int'].connect(MainDialog.gui_value_changed)
        self.overscan_left_sb.valueChanged['int'].connect(MainDialog.gui_value_changed)
        self.config_hdmi_boost_sb.valueChanged['int'].connect(MainDialog.gui_value_changed)
        self.hdmi_ignore_edid_cb.stateChanged['int'].connect(MainDialog.hdmi_ignore_edid_changed)
        self.hdmi_force_hotplug_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        self.overscan_bottom_sb.valueChanged['int'].connect(MainDialog.gui_value_changed)
        self.hdmi_drive_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        self.spi_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        self.i2c_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        self.bluetooth_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        self.i2s_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        self.audio_cb.stateChanged['int'].connect(MainDialog.gui_value_changed)
        QtCore.QMetaObject.connectSlotsByName(MainDialog)
        MainDialog.setTabOrder(self.tabWidget, self.graphics_driver_cb)
        MainDialog.setTabOrder(self.graphics_driver_cb, self.cma_cb)
        MainDialog.setTabOrder(self.cma_cb, self.normal_mode_rb)
        MainDialog.setTabOrder(self.normal_mode_rb, self.safe_mode_rb)
        MainDialog.setTabOrder(self.safe_mode_rb, self.hdmi_group_cb)
        MainDialog.setTabOrder(self.hdmi_group_cb, self.hdmi_mode_cb)
        MainDialog.setTabOrder(self.hdmi_mode_cb, self.hdmi_force_hotplug_cb)
        MainDialog.setTabOrder(self.hdmi_force_hotplug_cb, self.hdmi_ignore_edid_cb)
        MainDialog.setTabOrder(self.hdmi_ignore_edid_cb, self.config_hdmi_boost_sb)
        MainDialog.setTabOrder(self.config_hdmi_boost_sb, self.overscan_gb)
        MainDialog.setTabOrder(self.overscan_gb, self.overscan_left_sb)
        MainDialog.setTabOrder(self.overscan_left_sb, self.overscan_right_sb)
        MainDialog.setTabOrder(self.overscan_right_sb, self.overscan_top_sb)
        MainDialog.setTabOrder(self.overscan_top_sb, self.overscan_bottom_sb)
        MainDialog.setTabOrder(self.overscan_bottom_sb, self.hdmi_drive_cb)
        MainDialog.setTabOrder(self.hdmi_drive_cb, self.hdmi_force_edid_audio_cb)
        MainDialog.setTabOrder(self.hdmi_force_edid_audio_cb, self.spi_cb)
        MainDialog.setTabOrder(self.spi_cb, self.i2c_cb)
        MainDialog.setTabOrder(self.i2c_cb, self.i2s_cb)
        MainDialog.setTabOrder(self.i2s_cb, self.bluetooth_cb)
        MainDialog.setTabOrder(self.bluetooth_cb, self.audio_cb)

    def retranslateUi(self, MainDialog):
        _translate = QtCore.QCoreApplication.translate
        MainDialog.setWindowTitle(_translate("MainDialog", "RPi3 Configuration"))
        self.graphics_driver_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Graphics driver</span></p><p>Choose which display driver you\'d like from this dropdown. The three options are:</p><ol style=\"margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; -qt-list-indent: 1;\"><li style=\" margin-top:12px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">fkms-v3d</span>: an accelerated, GL-based graphics driver, using DispmanX for composition (\'fake\' KMS); recommended for most users, and the shipped default on the image;</li><li style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">kms-v3d</span>: as above, but using the kernel KMS driver for composition (\'full\' KMS); and</li><li style=\" margin-top:0px; margin-bottom:12px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">framebuffer</span>: fallback, unaccelerated graphics driver.</li></ol><p>Please note that currently, MMAL and OpenMAX IL access to the GPU is <span style=\" font-style:italic;\">unavailable</span> when booted in 64-bit mode (this issue is common to all 64-bit distros for the RPi3, not just Gentoo).</p></body></html>"))
        self.graphics_driver_lb.setText(_translate("MainDialog", "Graphics driver:"))
        self.graphics_driver_cb.setItemText(0, _translate("MainDialog", "fkms-v3d"))
        self.graphics_driver_cb.setItemText(1, _translate("MainDialog", "kms-v3d"))
        self.graphics_driver_cb.setItemText(2, _translate("MainDialog", "framebuffer"))
        self.cma_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">CMA</span></p><p>You can set the amount of memory to allocate to the graphics driver here. CMA is a dynamic, contiguous allocator provided by the kernel. For most users, it is recommended to set this to 256 MiB (ensuring optimal display performance), unless you will be very short of RAM for your running applications.</p></body></html>"))
        self.cma_lb.setText(_translate("MainDialog", "CMA:"))
        self.cma_cb.setItemText(0, _translate("MainDialog", "256 MiB"))
        self.cma_cb.setItemText(1, _translate("MainDialog", "192 MiB"))
        self.cma_cb.setItemText(2, _translate("MainDialog", "128 MiB"))
        self.cma_cb.setItemText(3, _translate("MainDialog", "96 MiB"))
        self.cma_cb.setItemText(4, _translate("MainDialog", "64 MiB"))
        self.cma_cb.setItemText(5, _translate("MainDialog", "Unspecified"))
        self.normal_mode_rb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Normal mode</span></p><p>Select this for more control over HDMI display output (recommended).</p><p>It is then also recommended to choose &quot;Auto-detect from EDID&quot; for both HDMI group and HDMI mode below, unless your monitor displays in a lower resolution than that you know it is capable of (in which case, choose an appropriate <span style=\" background-color:transparent;\">explicit</span> HDMI group, and if required, an appropriate explicit HDMI mode, from the dropdowns below).</p></body></html>"))
        self.normal_mode_rb.setText(_translate("MainDialog", "Normal mode"))
        self.normal_mode_rb.setShortcut(_translate("MainDialog", "Ctrl+R"))
        self.safe_mode_rb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">\'Safe\' mode</span></p><p>Choosing this <span style=\" font-style:italic;\">forces</span> VGA (DMT 640x480 60Hz 4:3), plus some other compatibility-related settings.</p><p>Use safe mode only as a last resort: most displays offer <span style=\" font-style:italic;\">significantly</span> higher resolution than VGA, and your RPi3 can select these higher resolutions automatically, if you choose Normal mode, and then &quot;Auto-detect from EDID&quot; for both HDMI group and HDMI mode from the dropdowns below.</p><p>Also note there are some fixed-resolution LCD screens that will not operate with the resolution and timing defaults of \'safe\' mode, so it is not a guaranteed lowest common denominator.</p></body></html>"))
        self.safe_mode_rb.setText(_translate("MainDialog", "\'Safe\' mode"))
        self.normal_mode_gb.setTitle(_translate("MainDialog", "Normal mode details"))
        self.hdmi_group_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">HDMI group</span></p><p>Using this dropdown, you can choose the <span style=\" font-style:italic;\">type</span> (aka, HDMI \'group\') of your attached display. For most systems, leaving this as \'auto-detect\' will work fine, but you can also explicitly choose CEA or DMT here.</p><p>CEA stands for Consumer Electronics Association, and is the standard typically used by digital TVs. DMT stands for Display Monitor Timings, and is the standard typically used by monitors.</p><p>Should you specify the CEA or DMT group explicitly, the <span style=\" font-style:italic;\">resolution, timing</span> and <span style=\" font-style:italic;\">aspect ratio</span> (aka, HDMI \'mode\') dropdown is populated by a list of settings your attached display claims to support under that group, and undimmed. Again, you can then use auto-detect, or choose a mode explicitly. Note that most modern monitors - and some modern TVs - can work in <span style=\" font-style:italic;\">either </span><span style=\" text-decoration: underline;\">group</span>, but may support different (effective) <span style=\" text-decoration: underline;\">modes</span> in each case.</p><p>Why specify the group and/or mode <span style=\" background-color:transparent;\">explicitly</span>? The most common use case is when your system boots up OK, but auto-selects a much lower resolution than you know your display is capable off. This sometimes happens because manufacturers mark a low (e.g., VGA) resolution as \'preferred\', for compatibility, in their products\' supported-mode lists. In such a case, you can use the group and mode dropdowns to choose something better.</p><p><span style=\" font-weight:600;\">NB:</span> you generally do <span style=\" font-style:italic;\">not</span> need to override the display EDID (checkbox below), even if you are using a custom HDMI group and/or mode, unless your display returns only very few valid modes for your target group (and you know it supports more).</p></body></html>"))
        self.hdmi_group_lb.setText(_translate("MainDialog", "HDMI group:"))
        self.hdmi_group_cb.setItemText(0, _translate("MainDialog", "Auto-detect from EDID"))
        self.hdmi_group_cb.setItemText(1, _translate("MainDialog", "1: CEA (some monitors, most HDMI TVs)"))
        self.hdmi_group_cb.setItemText(2, _translate("MainDialog", "2: DMT (most monitors, newer HDMI TVs)"))
        self.hdmi_mode_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">HDMI mode</span></p><p>This dropdown contains a list of resolutions, frequencies and aspect ratios (aka \'modes\') your display claims to accept for the current group. Try booting under \'auto-select\' first, and only if that result is unsuitable (very low-res, for example), and changing group doesn\'t help, proceed to setting the value manually.</p><p>NB: if you have <span style=\" font-style:italic;\">no</span> display connected to your RPi3 (for example, because you are using VNC), you will need to elect to override the EDID (checkbox below), to get a default list of modes presented here.</p></body></html>"))
        self.hdmi_mode_lb.setText(_translate("MainDialog", "HDMI mode:"))
        self.additional_opts_gb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Additional Options</span></p><p>These options are overridden if \'safe\' mode is set.</p></body></html>"))
        self.additional_opts_gb.setTitle(_translate("MainDialog", "Additional options"))
        self.hdmi_force_hotplug_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Force HDMI output</span></p><p>When checked, pretend that the HDMI hotplug signal is asserted, so it appears that a HDMI display is attached. In other words, HDMI output mode will be used, even if no HDMI monitor is detected.</p></body></html>"))
        self.hdmi_force_hotplug_cb.setText(_translate("MainDialog", "Force HDMI output, even if no display detected"))
        self.hdmi_ignore_edid_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Override HDMI display\'s reported EDID</span></p><p>When checked, your connected display\'s reported EDID (Extended Display Identification Data) will be ignored. This can be useful if your display does not have an accurate EDID, or if you have no display currently connected.</p><p>A default (rather than display-customized) set of HDMI modes for each group may be chosen in the dropdown above, when this is selected.</p><p><span style=\" font-weight:600;\">NB</span>: most users will <span style=\" font-style:italic;\">not</span> need to select this option, even when using a custom HDMI group and mode.</p></body></html>"))
        self.hdmi_ignore_edid_cb.setText(_translate("MainDialog", "Override HDMI display\'s reported EDID data (if any)"))
        self.config_hdmi_boost_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">HDMI output signal level</span></p><p>Configures the signal strength of the HDMI interface. The default value is 5.</p><p>If you are seeing HDMI issues (speckling, interference) then try 7. Very long HDMI cables may need up to 11, but values this high should not be used unless absolutely necessary.</p></body></html>"))
        self.config_hdmi_boost_lb.setText(_translate("MainDialog", "HDMI output signal level:"))
        self.overscan_gb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Overscan Correction</span></p><p>If your desktop appears \'clipped\' by the edges of the display, you can enable overscan correction, and then choose how many pixels to skip at each edge.</p><p>Most modern HDMI TVs, and nearly all monitors, will <span style=\" font-style:italic;\">not</span> require overscan enabled. The issue mostly occurs with older HDMI TVs.</p></body></html>"))
        self.overscan_gb.setTitle(_translate("MainDialog", "Overscan"))
        self.overscan_left_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Overscan left</span></p><p>Specifies the number of pixels to skip on the left edge of the screen, when overscan is enabled.</p><p>Increase this value if your desktop flows off the left edge of the screen; decrease it if there is a black border between the left edge of the screen and the desktop.</p></body></html>"))
        self.overscan_left_lb.setText(_translate("MainDialog", "Left:"))
        self.overscan_right_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Overscan right</span></p><p>Specifies the number of pixels to skip on the right edge of the screen, when overscan is enabled.</p><p>Increase this value if your desktop flows off the right edge of the screen; decrease it if there is a black border between the right edge of the screen and the desktop.</p></body></html>"))
        self.overscan_right_lb.setText(_translate("MainDialog", "Right:"))
        self.overscan_top_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Overscan top</span></p><p>Specifies the number of pixels to skip on the top edge of the screen, when overscan is enabled.</p><p>Increase this value if your desktop flows off the top edge of the screen; decrease it if there is a black border between the top edge of the screen and the desktop.</p></body></html>"))
        self.overscan_top_lb.setText(_translate("MainDialog", "Top:"))
        self.overscan_bottom_lb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Overscan bottom</span></p><p>Specifies the number of pixels to skip on the bottom edge of the screen, when overscan is enabled.</p><p>Increase this value if your desktop flows off the bottom edge of the screen; decrease it if there is a black border between the bottom edge of the screen and the text.</p></body></html>"))
        self.overscan_bottom_lb.setText(_translate("MainDialog", "Bottom:"))
        self.further_settings_gb.setTitle(_translate("MainDialog", "Further display settings"))
        self.hdmi_drive_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Force audio output in DMT modes</span></p><p>Selecting this forces normal HDMI sound output, rather than DVI. It can make sound playback work when connected to a monitor (or an HDMI TV that appears, through its EDID, to be a monitor), provided the device incorporates a speaker, of course.</p></body></html>"))
        self.hdmi_drive_cb.setText(_translate("MainDialog", "Force audio output in DMT modes"))
        self.hdmi_force_edid_audio_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Assume display supports audio</span></p><p>When checked, it will be assumed that your display supports <span style=\" font-style:italic;\">all</span> audio formats (regardless of what its EDID says). This allows passthrough of DTS/AC3 even when this is not reported as supported.</p><p>Most users will not need to select this, but it can be useful to make audio output work for certain displays.</p></body></html>"))
        self.hdmi_force_edid_audio_cb.setText(_translate("MainDialog", "Assume display supports audio (partial EDID override)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.display_tab), _translate("MainDialog", "Display"))
        self.main_interfaces_gb.setTitle(_translate("MainDialog", "Main interfaces"))
        self.spi_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Enable SPI</span></p><p>When checked, the RPi3\'s SPI (Serial Peripheral Interface) will be enabled.</p></body></html>"))
        self.spi_cb.setText(_translate("MainDialog", "Enable SPI"))
        self.i2c_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Enable I</span><span style=\" font-weight:600; vertical-align:super;\">2</span><span style=\" font-weight:600;\">C</span></p><p>When checked, the RPi3\'s I<span style=\" vertical-align:super;\">2</span>C (Inter-Integrated Circuit, pronounced eye-squared-see) interface will be enabled.</p><p>Despite the similar name, it is unrelated to the I<span style=\" vertical-align:super;\">2</span>S interface, below.</p></body></html>"))
        self.i2c_cb.setText(_translate("MainDialog", "Enable I2C"))
        self.i2s_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Enable I</span><span style=\" font-weight:600; vertical-align:super;\">2</span><span style=\" font-weight:600;\">S</span></p><p>When checked, the RPi3\'s I<span style=\" vertical-align:super;\">2</span>S (Inter-IC Sound, pronounced eye-squared-ess) interface will be enabled.</p><p>Despite the similar name, it is unrelated to the I<span style=\" vertical-align:super;\">2</span>C interface, above.</p></body></html>"))
        self.i2s_cb.setText(_translate("MainDialog", "Enable I2S"))
        self.bluetooth_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Enable Bluetooth</span></p><p>When checked, the RPi3\'s inbuilt Bluetooth will be enabled. When unchecked, UART0/ttyAMA0 over GPIOs 14 &amp; 15 becomes usable instead.</p><p><span style=\" font-weight:600;\">NB</span>: if do <span style=\" font-style:italic;\">not</span> wish to use Bluetooth, remember to also disable the OpenRC service that initialises the modem, so it doesn\'t utilize the UART. To do so, issue:<br/><span style=\" font-family:\'monospace\';\">sudo rc-service rpi3-bluetooth stop</span><br/>followed by:<br/><span style=\" font-family:\'monospace\';\">sudo rc-update del rpi3-bluetooth default</span></p></body></html>"))
        self.bluetooth_cb.setText(_translate("MainDialog", "Enable Bluetooth (disables serial port)"))
        self.audio_cb.setToolTip(_translate("MainDialog", "<html><head/><body><p><span style=\" font-weight:600;\">Enable audio</span></p><p>When checked, the RPi3\'s onboard ALSA interface will be enabled.</p></body></html>"))
        self.audio_cb.setText(_translate("MainDialog", "Enable audio"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.wifi_tab), _translate("MainDialog", "Interfaces"))

from pyconfig_gen import pyconfig_gen_rc
